{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><comment id=\"gkd#!:e`(|(pH?ffK`*/\" x=\"904\" y=\"101\" h=\"100\" w=\"100\">100mm is 8 dots</comment><comment id=\"52LKrah_b^`cYC?7Ifgy\" x=\"1142\" y=\"279\" h=\"100\" w=\"100\">90 degrees is actually 90 degrees</comment><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"430\" y=\"30\"><next><block type=\"iq_drivetrain_set_drive_velocity\" id=\"+-*i0,HwN84ZWX[xkKNT\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"_.(!bn@xU4M2i4t)J*ll\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\"OI0sLtJP%/[g#SZbt4si\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"dF-S7V=neHZ%dNh;Y,}E\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\"!lI0/%n|_[4]p3mgVUJW\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\";]a@!]BSR{!$|}pc!w9#\"><field name=\"NUM\">20</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"c6~Pz9sLCQBUhcKDN6Pg\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"g]5j@,YJ3K[)$f|,4Zq*\"><field name=\"NUM\">940</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\".*JQl?3vuawmA@.E.l4z\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"~+A(dyc4Dx^9uvxfg!JX\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\":[ch1A`/C{TC!tz;+qKA\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"KJ(Y9Q1VotAcryBtc{_f\"><field name=\"NUM\">400</field></shadow></value><next><block type=\"iq_drivetrain_turn_for\" id=\"q.wWJ|A*gNk4W5?m~$x2\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"FqD,RKwr/]Vh4qJD?YPP\"><field name=\"NUM\">200</field></shadow></value><next><block type=\"iq_drivetrain_drive_for\" id=\"(V?1E{on`Lv^nGQk)0sf\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"`rZ36:Xgz7m);p.1_9h=\"><field name=\"NUM\">700</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,6,5],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"200","unit":"mm","wheelbase":"153","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ngyro DrivetrainGyro = gyro(PORT5, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 200);\n\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate(calNormal);\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.turnFor(right, 20.0, degrees, true);\n  Drivetrain.turnFor(left, 20.0, degrees, true);\n  Drivetrain.driveFor(forward, 940.0, mm, true);\n  Drivetrain.turnFor(right, 90.0, degrees, true);\n  Drivetrain.driveFor(forward, 400.0, mm, true);\n  Drivetrain.turnFor(left, 200.0, degrees, true);\n  Drivetrain.driveFor(reverse, 700.0, mm, true);\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  whenStarted1();\n}","target":"Physical"}